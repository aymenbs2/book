// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.
// @dart = 2.12

import 'dart:core';
import 'package:mbook/book.dart' as prefix0;
import 'package:mbook/mbook.dart' as prefix1;

// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const
// ignore_for_file: implementation_imports

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.MbookReflectable(): r.ReflectorData(
      <m.TypeMirror>[
        r.NonGenericClassMirrorImpl(
            r'Test',
            r'mbook.Test',
            7,
            0,
            const prefix0.MbookReflectable(),
            const <int>[0, 1, 6],
            const <int>[7, 8, 9, 10, 11, 2, 3, 4, 5],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bool b) => () => b ? prefix1.Test() : null},
            -1,
            -1,
            const <int>[-1],
            const <Object>[prefix0.MBookReflectable],
            null)
      ],
      <m.DeclarationMirror>[
        r.VariableMirrorImpl(r'name', 32773, 0,
            const prefix0.MbookReflectable(), -1, -1, -1, null, const []),
        r.VariableMirrorImpl(r'id', 32773, 0, const prefix0.MbookReflectable(),
            -1, -1, -1, null, const []),
        r.ImplicitGetterMirrorImpl(const prefix0.MbookReflectable(), 0, 2),
        r.ImplicitSetterMirrorImpl(const prefix0.MbookReflectable(), 0, 3),
        r.ImplicitGetterMirrorImpl(const prefix0.MbookReflectable(), 1, 4),
        r.ImplicitSetterMirrorImpl(const prefix0.MbookReflectable(), 1, 5),
        r.MethodMirrorImpl(r'', 0, 0, -1, -1, -1, null, const <int>[],
            const prefix0.MbookReflectable(), const []),
        r.MethodMirrorImpl(r'==', 131074, -1, -1, -1, -1, null, const <int>[2],
            const prefix0.MbookReflectable(), const []),
        r.MethodMirrorImpl(r'toString', 131074, -1, -1, -1, -1, null,
            const <int>[], const prefix0.MbookReflectable(), const []),
        r.MethodMirrorImpl(r'noSuchMethod', 65538, -1, -1, -1, -1, null,
            const <int>[3], const prefix0.MbookReflectable(), const []),
        r.MethodMirrorImpl(r'hashCode', 131075, -1, -1, -1, -1, null,
            const <int>[], const prefix0.MbookReflectable(), const []),
        r.MethodMirrorImpl(r'runtimeType', 131075, -1, -1, -1, -1, null,
            const <int>[], const prefix0.MbookReflectable(), const [])
      ],
      <m.ParameterMirror>[
        r.ParameterMirrorImpl(
            r'_name',
            32870,
            3,
            const prefix0.MbookReflectable(),
            -1,
            -1,
            -1,
            null,
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'_id',
            32870,
            5,
            const prefix0.MbookReflectable(),
            -1,
            -1,
            -1,
            null,
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'other',
            32774,
            7,
            const prefix0.MbookReflectable(),
            -1,
            -1,
            -1,
            null,
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'invocation',
            32774,
            9,
            const prefix0.MbookReflectable(),
            -1,
            -1,
            -1,
            null,
            const [],
            null,
            null)
      ],
      <Type>[prefix1.Test],
      1,
      {
        r'==': (dynamic instance) => (x) => instance == x,
        r'toString': (dynamic instance) => instance.toString,
        r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
        r'hashCode': (dynamic instance) => instance.hashCode,
        r'runtimeType': (dynamic instance) => instance.runtimeType,
        r'name': (dynamic instance) => instance.name,
        r'id': (dynamic instance) => instance.id
      },
      {
        r'name=': (dynamic instance, value) => instance.name = value,
        r'id=': (dynamic instance, value) => instance.id = value
      },
      null,
      [])
};

final _memberSymbolMap = null;

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
